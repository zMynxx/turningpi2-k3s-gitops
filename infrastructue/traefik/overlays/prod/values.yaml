# Configure the deployment
# -- Global command arguments to be passed to all traefik's pods
globalArguments:
- "--global.checknewversion=false"
- "--global.sendanonymoususage=false"

# Configure Traefik static configuration
# -- Additional arguments to be passed at Traefik's binary
# All available options available on https://docs.traefik.io/reference/static-configuration/cli/
# Use curly braces to pass values: `helm install --set="additionalArguments={--providers.kubernetesingress.ingressclass=traefik-internal,--log.level=DEBUG}"`
additionalArguments:
  - "--serversTransport.insecureSkipVerify=true"
  - "--log.level=DEBUG"
  - "--log.filePath=/var/log/traefik.log"
  - "--api=true"
  - "--api.insecure=true"
  # - "--api.dashboard=true"

deployment:
  # -- Enable deployment
  enabled: true
  # -- Deployment or DaemonSet
  kind: Deployment
  # -- Number of pods of the deployment (only applies when kind == Deployment)
  replicas: 3

## Create an IngressRoute for the dashboard
ingressRoute:
  dashboard:
    # -- Create an IngressRoute for the dashboard
    enabled: false 

ports:
  web:
    # Port Redirections
    # Added in 2.2, you can make permanent redirects via entrypoints.
    # https://docs.traefik.io/routing/entrypoints/#redirection
    redirectTo:
      port: websecure
  websecure:
    ## Set TLS at the entrypoint
    ## https://doc.traefik.io/traefik/routing/entrypoints/#tls
    tls:
      enabled: true
  metrics:
    # -- When using hostNetwork, use another port to avoid conflict with node exporter:
    # https://github.com/prometheus/prometheus/wiki/Default-port-allocations
    port: 9100
    # hostPort: 9100
    # Defines whether the port is exposed if service.type is LoadBalancer or
    # NodePort.
    #
    # -- You may not want to expose the metrics port on production deployments.
    # If you want to access it from outside your cluster,
    # use `kubectl port-forward` or create a secure ingress
    expose: true
    # -- The exposed port for this service
    exposedPort: 9100
    # -- The port protocol (TCP/UDP)
    protocol: TCP
    # -- Defines whether the port is exposed on the internal service;
    # note that ports exposed on the default service are exposed on the internal
    # service by default as well.
    exposeInternal: true


providers:
  kubernetesCRD:
    # -- Load Kubernetes IngressRoute provider
    enabled: true
    # -- Allows IngressRoute to reference resources in namespace other than theirs
    ingressClass: traefik

  kubernetesIngress:
    # -- Load Kubernetes Ingress provider
    enabled: true
    # IP used for Kubernetes Ingress endpoints
    publishedService:
      enabled: true 
      # Published Kubernetes Service to copy status from. Format: namespace/servicename
      # By default this Traefik service
      # pathOverride: ""

# -- Whether Role Based Access Control objects like roles and rolebindings should be created
rbac:
  enabled: true
  # If set to false, installs ClusterRole and ClusterRoleBinding so Traefik can be used across namespaces.
  # If set to true, installs Role and RoleBinding. Providers will only watch target namespace.
  namespaced: false
  # Enable user-facing roles
  # https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles
  # aggregateTo: [ "admin" ]

service:
  enabled: true
  ## -- Single service is using `MixedProtocolLBService` feature gate.
  ## -- When set to false, it will create two Service, one for TCP and one for UDP.
  single: true
  type: LoadBalancer
  # -- Additional annotations applied to both TCP and UDP services (e.g. for cloud provider specific config)
  annotations: {}
  labels: {}
  # -- Additional entries here will be added to the service spec.
  # -- Cannot contain type, selector or ports entries.
  spec: 
  # externalTrafficPolicy: Cluster
    loadBalancerIP: "192.168.7.100"

logs:
  general:
    # -- By default, the logs use a text format (common), but you can
    # also ask for the json format in the format option
    # format: json
    # By default, the level is set to ERROR.
    # -- Alternative logging levels are DEBUG, PANIC, FATAL, ERROR, WARN, and INFO.
    level: ERROR
  access:
    # -- To enable access logs
    enabled: true 

metrics:
  ## -- Prometheus is enabled by default.
  ## -- It can be disabled by setting "prometheus: null"
  prometheus:
    # -- Entry point used to expose metrics.
    entryPoint: metrics
    ## Enable metrics on entry points. Default=true
    addEntryPointsLabels: true
    ## Enable metrics on routers. Default=false
    addRoutersLabels: true
    ## Enable metrics on services. Default=true
    addServicesLabels: true

  ## -- enable optional CRDs for Prometheus Operator
  ##
  ## Create a dedicated metrics service for use with ServiceMonitor
  service:
    enabled: true 
    labels: {}
    annotations: {}
  ## When set to true, it won't check if Prometheus Operator CRDs are deployed
  disableAPICheck: false
  serviceMonitor:
    metricRelabelings:
      - sourceLabels: [__name__]
        separator: ;
        regex: ^fluentd_output_status_buffer_(oldest|newest)_.+
        replacement: $1
        action: drop
    relabelings:
      - sourceLabels: [__meta_kubernetes_pod_node_name]
        separator: ;
        regex: ^(.*)$
        targetLabel: nodename
        replacement: $1
        action: replace
    jobLabel: traefik
    interval: 30s
    honorLabels: true
    # (Optional)
    scrapeTimeout: 5s
    honorTimestamps: true
    enableHttp2: true
    followRedirects: true
    # additionalLabels:
    #   foo: bar
    # namespace: "another-namespace"
    namespaceSelector: {}
  prometheusRule:
    additionalLabels: {}
    namespace: "another-namespace"
    rules:
      - alert: TraefikDown
        expr: up{job="traefik"} == 0
        for: 5m
        labels:
          context: traefik
          severity: warning
        annotations:
          summary: "Traefik Down"
          description: "{{ $labels.pod }} on {{ $labels.nodename }} is down"


# -- Environment variables to be passed to Traefik's binary from configMaps or secrets
# envFrom:
#   - secretRef:
#       name: cloudflare-secret
#
# extraObjects:
