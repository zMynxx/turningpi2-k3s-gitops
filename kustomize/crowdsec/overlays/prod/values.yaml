# Default values for crowdsec-chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- for raw logs format: json or cri (docker|containerd)
container_runtime: containerd 

# Here you can specify your own custom configuration to be loaded in crowdsec agent or lapi
# Each config needs to be a multi-line using '|' in YAML specs
# for the agent those configs will be loaded : parsers, scenarios, postoverflows, simulation.yaml
# for the lapi those configs will be loaded : profiles.yaml, notifications, console.yaml
config:
  # -- to better understand how to write a postoverflow, you can take a look at (https://docs.crowdsec.net/docs/next/whitelist/create/#whitelist-in-postoverflows)
  postoverflows:
    s01-whitelist:
      localips.yaml: |
        name: crowdsecurity/whitelists
        description: "Whitelist events from private ipv4 addresses"
        whitelist:
          reason: "private ipv4/ipv6 ip/ranges"
          ip: 
            - "127.0.0.1"
            - "::1"
          cidr:
            - "192.168.7.0/24"

# agent will deploy pod on every node as daemonSet to read wanted pods logs
agent:
  # -- To add custom acquisitions using available datasources (https://docs.crowdsec.net/docs/next/data_sources/intro)
  additionalAcquisition: []
    # - source: kinesis
    #   stream_name: my-stream
    #   labels:
    #     type: mytype
    # - source: syslog
    #   listen_addr: 127.0.0.1
    #   listen_port: 4242
    #   labels:
    #     type: syslog
  acquisition:
    # -- Specify each pod you want to process it logs (namespace, podName and program)
    - namespace: "traefik" 
      # -- to select pod logs to process
      podName: "traefik-*" 
      # -- program name related to specific parser you will use (see https://hub.crowdsec.net/author/crowdsecurity/configurations/docker-logs)
      program: "traefik" 
  env: 
    # by default we configure the docker-logs parser to be able to parse docker logs in k8s
    # by default we disable local API on the agent pod
    # - name: SCENARIOS
    #   value: "scenario/name otherScenario/name"
    - name: PARSERS
      value: "crowdsecurity/cri-logs"
    - name: COLLECTIONS
      value: "crowdsecurity/traefik"
    - name: TZ
      value: Asia/Jerusalem
    - name: DISABLE_LOCAL_API 
      value: false
    - name: DISABLE_AGENT
      value: "false"
# - name: DISABLE_PARSERS
#   value: "crowdsecurity/whitelist"
# - name: POSTOVERFLOWS
#   value: "postoverflow/name otherPostoverflow/name"
# - name: CONFIG_FILE
#   value: "/etc/crowdsec/config.yaml"
# - name: DISABLE_ONLINE_API
#   value: "false"
# - name: LEVEL_TRACE
#   value: "false"
# - name: LEVEL_DEBUG
#   value: "false"
# - name: LEVEL_INFO
#   value: "false"  

  # -- Enable service monitoring (exposes "metrics" port "6060" for Prometheus)
  metrics:
    enabled: true 
    # -- Creates a ServiceMonitor so Prometheus will monitor this service
    # -- Prometheus needs to be configured to watch on all namespaces for ServiceMonitors
    # -- See the documentation: https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack#prometheusioscrape
    # -- See also: https://github.com/prometheus-community/helm-charts/issues/106#issuecomment-700847774
    serviceMonitor:
      enabled: true 

# lapi will deploy pod with crowdsec lapi and dashboard as deployment
lapi:
  # -- environment variables from crowdsecurity/crowdsec docker image
  env: 
    - name: ENROLL_KEY
      value: "cltei31sq0000jx083w246vz7"
    - name: ENROLL_INSTANCE_NAME
      value: "k3s-cluster"
    - name: ENROLL_TAGS
      value: "TEST"
    - name: LOCAL_API_URL
      value: "http://crowdsec-service.crowdsec.svc.cluster.local:8080"

  # -- Enable ingress lapi object
  ingress:
    enabled: false
    annotations:
    # labels: {}
    ingressClassName: "" # nginx
    host: "" # crowdsec-api.example.com
    # tls: {}

  dashboard:
    # -- Enable Metabase Dashboard (by default disabled)
    enabled: true 
    # -- Enable ingress object
    ingress:
      enabled: false 
      annotations:
      # labels: {}
      ingressClassName: "traefik"
      host: "crowdsec.tpi2.local" 
      # tls: {}
  # -- Enable service monitoring (exposes "metrics" port "6060" for Prometheus)
  metrics:
    enabled: true 
    # -- Creates a ServiceMonitor so Prometheus will monitor this service
    # -- Prometheus needs to be configured to watch on all namespaces for ServiceMonitors
    # -- See the documentation: https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack#prometheusioscrape
    # -- See also: https://github.com/prometheus-community/helm-charts/issues/106#issuecomment-700847774
    serviceMonitor:
      enabled: true 

