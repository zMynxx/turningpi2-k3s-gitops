# Configure the deployment
# -- Global command arguments to be passed to all traefik's pods
globalArguments:
- "--global.checknewversion=false"
- "--global.sendanonymoususage=false"

#
# Configure Traefik static configuration
# -- Additional arguments to be passed at Traefik's binary
# All available options available on https://docs.traefik.io/reference/static-configuration/cli/
## Use curly braces to pass values: `helm install --set="additionalArguments={--providers.kubernetesingress.ingressclass=traefik-internal,--log.level=DEBUG}"`
additionalArguments:
  - "--serversTransport.insecureSkipVerify=true"
  - "--log.level=DEBUG"

deployment:
  # -- Enable deployment
  enabled: true
  # -- Deployment or DaemonSet
  kind: Deployment
  # -- Number of pods of the deployment (only applies when kind == Deployment)
  replicas: 3

## Create an IngressRoute for the dashboard
ingressRoute:
  dashboard:
    # -- Create an IngressRoute for the dashboard
    enabled: false 
  timeoutSeconds: 2

ports:
  web:
    # Port Redirections
    # Added in 2.2, you can make permanent redirects via entrypoints.
    # https://docs.traefik.io/routing/entrypoints/#redirection
    redirectTo:
      port: websecure
  websecure:
    ## Set TLS at the entrypoint
    ## https://doc.traefik.io/traefik/routing/entrypoints/#tls
    tls:
      enabled: true

providers:
  kubernetesCRD:
    # -- Load Kubernetes IngressRoute provider
    enabled: true
    # -- Allows IngressRoute to reference resources in namespace other than theirs
    ingressClass: traefik

  kubernetesIngress:
    # -- Load Kubernetes Ingress provider
    enabled: true
    # IP used for Kubernetes Ingress endpoints
    publishedService:
      enabled: true 
      # Published Kubernetes Service to copy status from. Format: namespace/servicename
      # By default this Traefik service
      # pathOverride: ""

service:
  enabled: true
  ## -- Single service is using `MixedProtocolLBService` feature gate.
  ## -- When set to false, it will create two Service, one for TCP and one for UDP.
  single: true
  type: LoadBalancer
  # -- Additional annotations applied to both TCP and UDP services (e.g. for cloud provider specific config)
  annotations: {}
  labels: {}
  # -- Additional entries here will be added to the service spec.
  # -- Cannot contain type, selector or ports entries.
  spec: 
  # externalTrafficPolicy: Cluster
    loadBalancerIP: "192.168.7.100"


# -- Whether Role Based Access Control objects like roles and rolebindings should be created
rbac:
  enabled: true
  # If set to false, installs ClusterRole and ClusterRoleBinding so Traefik can be used across namespaces.
  # If set to true, installs Role and RoleBinding. Providers will only watch target namespace.
  namespaced: false
  # Enable user-facing roles
  # https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles
  # aggregateTo: [ "admin" ]

extraObjects:
  - apiVersion: v1
    kind: Secret 
    metadata:
      name: traefik-dashboard-auth
      namespace: traefik
    spec:
      type: Opaque
      data:
        # htpasswd -nb user password | openssl base64
        #  -n  Don't update file; display results on stdout.
        # -b  Use the password from the command line rather than prompting for it.
        users:  ek15bnh4OiRhcHIxJGVrNEhnT0Q5JFQ0ZVRvOVVKNXljUjFCaloxVDJEai8KCg==

  - apiVersion: traefik.io/v1alpha1
    kind: Middleware
    metadata:
      name: traefik-dashboard-basicauth 
      namespace: traefik
    spec:
      basicAuth:
        secret: traefik-dashboard-auth

  - apiVersion: traefik.containo.us/v1alpha1
    kind: IngressRoute
    metadata:
      name: traefik-dashboard
      namespace: traefik
    spec:
      entryPoints:
        - websecure
      routes:
        - match: Host(`traefik.tpi2.local') && (PathPrefix(`/dashboard`) || PathPrefix(`/api`))
          kind: Rule
          middlewares:
            - name: traefik-dashboard-basicauth 
              namespace: traefik
          services:
            - name: api@internal
              kind: TraefikService
      tls:
        secretName: traefik-cert
        certResolver: cloudflare
        domains:
          - main: traefik.tpi2.local
            sans:
              - "*.traefik.tpi2.local"

  - apiVersion: traefik.io/v1alpha1
    kind: Middleware
    metadata:
      name: common_headers 
    spec:
      headers:
        browserXssFilter: true
        contentTypeNosniff: true
        forceSTSHeader: true
        stsIncludeSubdomains: true
        stsPreload: true
        stsSeconds: 15552000
        customRequestHeaders:
          X-Forwarded-Proto: "https"
        customFrameOptionsValue: "SAMEORIGIN"


  - apiVersion: traefik.io/v1alpha1
    kind: Middleware
    metadata:
      name: common_whitelist 
    spec:
      ipWhiteList:
        sourceRange:
          - "192.168.7.0/24"
